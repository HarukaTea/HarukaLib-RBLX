--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.16 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		ForceReset = table.freeze({
			Fire = noop
		}),
		RequestSpawn = table.freeze({
			Fire = noop
		}),
		CreateHint = table.freeze({
			On = noop
		}),
		CreateFullScreenHint = table.freeze({
			On = noop
		}),
		CreateTimer = table.freeze({
			On = noop
		}),
		CreateCenterNotify = table.freeze({
			On = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")
local reliable = remotes:WaitForChild("HARUKA_RELIABLE")
local unreliable = remotes:WaitForChild("HARUKA_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected HARUKA_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected HARUKA_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(6)
local event_queue: { [number]: { any } } = table.create(6)
events[3] = {}
event_queue[3] = {}
events[4] = {}
event_queue[4] = {}
events[5] = {}
event_queue[5] = {}
events[6] = {}
event_queue[6] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 3 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.Hint = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[3][1] then
				for _, cb in events[3] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[3], value)
				if #event_queue[3] > 64 then
					warn(`[ZAP] {#event_queue[3]} events in queue for CreateHint. Did you forget to attach a listener?`)
				end
			end
		elseif id == 4 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.Hint = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.State = buffer.readu8(incoming_buff, read(1)) == 1
			if events[4][1] then
				for _, cb in events[4] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[4], value)
				if #event_queue[4] > 64 then
					warn(`[ZAP] {#event_queue[4]} events in queue for CreateFullScreenHint. Did you forget to attach a listener?`)
				end
			end
		elseif id == 5 then
			local value
			value = {}
			value.Countdown = buffer.readu8(incoming_buff, read(1))
			if events[5][1] then
				for _, cb in events[5] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[5], value)
				if #event_queue[5] > 64 then
					warn(`[ZAP] {#event_queue[5]} events in queue for CreateTimer. Did you forget to attach a listener?`)
				end
			end
		elseif id == 6 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.Hint = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[6][1] then
				for _, cb in events[6] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[6], value)
				if #event_queue[6] > 64 then
					warn(`[ZAP] {#event_queue[6]} events in queue for CreateCenterNotify. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = {
	SendEvents = SendEvents,
	ForceReset = {
		Fire = function(Value: ({
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
		end,
	},
	RequestSpawn = {
		Fire = function(Value: ({
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
		end,
	},
	CreateHint = {
		On = function(Callback: (Value: ({
			Hint: (string),
		})) -> ())
			table.insert(events[3], Callback)
			for _, value in event_queue[3] do
				task.spawn(Callback, value)
			end
			event_queue[3] = {}
			return function()
				table.remove(events[3], table.find(events[3], Callback))
			end
		end,
	},
	CreateFullScreenHint = {
		On = function(Callback: (Value: ({
			Hint: (string),
			State: (boolean),
		})) -> ())
			table.insert(events[4], Callback)
			for _, value in event_queue[4] do
				task.spawn(Callback, value)
			end
			event_queue[4] = {}
			return function()
				table.remove(events[4], table.find(events[4], Callback))
			end
		end,
	},
	CreateTimer = {
		On = function(Callback: (Value: ({
			Countdown: (number),
		})) -> ())
			table.insert(events[5], Callback)
			for _, value in event_queue[5] do
				task.spawn(Callback, value)
			end
			event_queue[5] = {}
			return function()
				table.remove(events[5], table.find(events[5], Callback))
			end
		end,
	},
	CreateCenterNotify = {
		On = function(Callback: (Value: ({
			Hint: (string),
		})) -> ())
			table.insert(events[6], Callback)
			for _, value in event_queue[6] do
				task.spawn(Callback, value)
			end
			event_queue[6] = {}
			return function()
				table.remove(events[6], table.find(events[6], Callback))
			end
		end,
	},
}
type Events = typeof(returns)
return returns
