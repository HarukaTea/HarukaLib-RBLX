--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.17 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		SetData = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		CreateData = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RequestCreations = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		DestroyData = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RequestData = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("HARUKA_REPLICA_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "HARUKA_REPLICA_RELIABLE"
	reliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(1)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if reliable_events[0] then
				task.spawn(function(player_2, call_id_2, value_1)
					local ret_1 = reliable_events[0](player_2, value_1)
					load_player(player_2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 4)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id_2)
					if ret_1 == "Success" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					elseif ret_1 == "Failure" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					else
						error("Invalid enumerator")
					end
					player_map[player_2] = save()
				end, player, call_id, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = {
	SendEvents = SendEvents,
	SetData = {
		Fire = function(Player: Player, id: (number), path: ({ (string) }), value: ((unknown)))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local len_1 = #path
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = path[i_1]
				local len_2 = #val_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, val_1, len_2)
			end
			if value == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value)
			end
			player_map[Player] = save()
		end,
		FireAll = function(id: (number), path: ({ (string) }), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local len_3 = #path
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
			for i_2 = 1, len_3 do
				local val_2 = path[i_2]
				local len_4 = #val_2
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				alloc(len_4)
				buffer.writestring(outgoing_buff, outgoing_apos, val_2, len_4)
			end
			if value == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, id: (number), path: ({ (string) }), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local len_5 = #path
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
			for i_3 = 1, len_5 do
				local val_3 = path[i_3]
				local len_6 = #val_3
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
				alloc(len_6)
				buffer.writestring(outgoing_buff, outgoing_apos, val_3, len_6)
			end
			if value == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, id: (number), path: ({ (string) }), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local len_7 = #path
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
			for i_4 = 1, len_7 do
				local val_4 = path[i_4]
				local len_8 = #val_4
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_8)
				alloc(len_8)
				buffer.writestring(outgoing_buff, outgoing_apos, val_4, len_8)
			end
			if value == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, id: (number), path: ({ (string) }), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local len_9 = #path
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_9)
			for i_5 = 1, len_9 do
				local val_5 = path[i_5]
				local len_10 = #val_5
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_10)
				alloc(len_10)
				buffer.writestring(outgoing_buff, outgoing_apos, val_5, len_10)
			end
			if value == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	CreateData = {
		Fire = function(Player: Player, creation: ({ [(string)]: ({ ((unknown)) }) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_1 = alloc(2)
			local len_11 = 0
			for k_1, v_1 in creation do
				len_11 = len_11 + 1
				local len_12 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_12)
				alloc(len_12)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_12)
				local len_13 = #v_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_13)
				for i_6 = 1, len_13 do
					local val_6 = v_1[i_6]
					if val_6 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_6)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_11)
			player_map[Player] = save()
		end,
		FireAll = function(creation: ({ [(string)]: ({ ((unknown)) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_2 = alloc(2)
			local len_14 = 0
			for k_2, v_2 in creation do
				len_14 = len_14 + 1
				local len_15 = #k_2
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_15)
				alloc(len_15)
				buffer.writestring(outgoing_buff, outgoing_apos, k_2, len_15)
				local len_16 = #v_2
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_16)
				for i_7 = 1, len_16 do
					local val_7 = v_2[i_7]
					if val_7 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_7)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_2, len_14)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, creation: ({ [(string)]: ({ ((unknown)) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_3 = alloc(2)
			local len_17 = 0
			for k_3, v_3 in creation do
				len_17 = len_17 + 1
				local len_18 = #k_3
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_18)
				alloc(len_18)
				buffer.writestring(outgoing_buff, outgoing_apos, k_3, len_18)
				local len_19 = #v_3
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_19)
				for i_8 = 1, len_19 do
					local val_8 = v_3[i_8]
					if val_8 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_8)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_3, len_17)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, creation: ({ [(string)]: ({ ((unknown)) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_4 = alloc(2)
			local len_20 = 0
			for k_4, v_4 in creation do
				len_20 = len_20 + 1
				local len_21 = #k_4
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_21)
				alloc(len_21)
				buffer.writestring(outgoing_buff, outgoing_apos, k_4, len_21)
				local len_22 = #v_4
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_22)
				for i_9 = 1, len_22 do
					local val_9 = v_4[i_9]
					if val_9 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_9)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_4, len_20)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, creation: ({ [(string)]: ({ ((unknown)) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_5 = alloc(2)
			local len_23 = 0
			for k_5, v_5 in creation do
				len_23 = len_23 + 1
				local len_24 = #k_5
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_24)
				alloc(len_24)
				buffer.writestring(outgoing_buff, outgoing_apos, k_5, len_24)
				local len_25 = #v_5
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_25)
				for i_10 = 1, len_25 do
					local val_10 = v_5[i_10]
					if val_10 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_10)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_5, len_23)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	RequestCreations = {
		Fire = function(Player: Player, creation: ({ ({ [(string)]: ({ ((unknown)) }) }) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_26 = #creation
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_26)
			for i_11 = 1, len_26 do
				local val_11 = creation[i_11]
				local len_pos_6 = alloc(2)
				local len_27 = 0
				for k_6, v_6 in val_11 do
					len_27 = len_27 + 1
					local len_28 = #k_6
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_28)
					alloc(len_28)
					buffer.writestring(outgoing_buff, outgoing_apos, k_6, len_28)
					local len_29 = #v_6
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_29)
					for i_12 = 1, len_29 do
						local val_12 = v_6[i_12]
						if val_12 == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							table.insert(outgoing_inst, val_12)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_6, len_27)
			end
			player_map[Player] = save()
		end,
		FireAll = function(creation: ({ ({ [(string)]: ({ ((unknown)) }) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_30 = #creation
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_30)
			for i_13 = 1, len_30 do
				local val_13 = creation[i_13]
				local len_pos_7 = alloc(2)
				local len_31 = 0
				for k_7, v_7 in val_13 do
					len_31 = len_31 + 1
					local len_32 = #k_7
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_32)
					alloc(len_32)
					buffer.writestring(outgoing_buff, outgoing_apos, k_7, len_32)
					local len_33 = #v_7
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_33)
					for i_14 = 1, len_33 do
						local val_14 = v_7[i_14]
						if val_14 == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							table.insert(outgoing_inst, val_14)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_7, len_31)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, creation: ({ ({ [(string)]: ({ ((unknown)) }) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_34 = #creation
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_34)
			for i_15 = 1, len_34 do
				local val_15 = creation[i_15]
				local len_pos_8 = alloc(2)
				local len_35 = 0
				for k_8, v_8 in val_15 do
					len_35 = len_35 + 1
					local len_36 = #k_8
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_36)
					alloc(len_36)
					buffer.writestring(outgoing_buff, outgoing_apos, k_8, len_36)
					local len_37 = #v_8
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_37)
					for i_16 = 1, len_37 do
						local val_16 = v_8[i_16]
						if val_16 == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							table.insert(outgoing_inst, val_16)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_8, len_35)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, creation: ({ ({ [(string)]: ({ ((unknown)) }) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_38 = #creation
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_38)
			for i_17 = 1, len_38 do
				local val_17 = creation[i_17]
				local len_pos_9 = alloc(2)
				local len_39 = 0
				for k_9, v_9 in val_17 do
					len_39 = len_39 + 1
					local len_40 = #k_9
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_40)
					alloc(len_40)
					buffer.writestring(outgoing_buff, outgoing_apos, k_9, len_40)
					local len_41 = #v_9
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_41)
					for i_18 = 1, len_41 do
						local val_18 = v_9[i_18]
						if val_18 == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							table.insert(outgoing_inst, val_18)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_9, len_39)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, creation: ({ ({ [(string)]: ({ ((unknown)) }) }) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_42 = #creation
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_42)
			for i_19 = 1, len_42 do
				local val_19 = creation[i_19]
				local len_pos_10 = alloc(2)
				local len_43 = 0
				for k_10, v_10 in val_19 do
					len_43 = len_43 + 1
					local len_44 = #k_10
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_44)
					alloc(len_44)
					buffer.writestring(outgoing_buff, outgoing_apos, k_10, len_44)
					local len_45 = #v_10
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_45)
					for i_20 = 1, len_45 do
						local val_20 = v_10[i_20]
						if val_20 == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							table.insert(outgoing_inst, val_20)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_10, len_43)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	DestroyData = {
		Fire = function(Player: Player, id: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			player_map[Player] = save()
		end,
		FireAll = function(id: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, id: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, id: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, id: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, id)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	RequestData = {
		SetCallback = function(Callback: (Player: Player) -> (("Success" | "Failure"))): () -> ()
			reliable_events[0] = Callback
			return function()
				reliable_events[0] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
