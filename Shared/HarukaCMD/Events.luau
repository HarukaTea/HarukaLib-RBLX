--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.24 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		RequestToExecuteCommand = table.freeze({
			Fire = noop
		}),
		RequestCommands_Response = table.freeze({
			On = noop
		}),
		RequestCommands_Request = table.freeze({
			Fire = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("Ark")

local reliable = remotes:WaitForChild("Kaltsit_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected Kaltsit_RELIABLE to be a RemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(1)
local reliable_event_queue: { [number]: { any } } = table.create(1)
reliable_events[0] = {}
reliable_event_queue[0] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value
			value = {  }
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value["Commands"] = table.create(len_1)
			for i_1 = 1, len_1 do
				local val_1
				val_1 = {  }
				local len_2 = buffer.readu16(incoming_buff, read(2))
				val_1["Name"] = buffer.readstring(incoming_buff, read(len_2), len_2)
				local len_3 = buffer.readu16(incoming_buff, read(2))
				val_1["Alias"] = buffer.readstring(incoming_buff, read(len_3), len_3)
				val_1["RankReq"] = buffer.readu8(incoming_buff, read(1))
				local len_4 = buffer.readu16(incoming_buff, read(2))
				val_1["Args"] = table.create(len_4)
				for i_2 = 1, len_4 do
					local bool_1 = buffer.readu8(incoming_buff, read(1))
					local val_2
					val_2 = {  }
					local len_5 = buffer.readu16(incoming_buff, read(2))
					val_2["Name"] = buffer.readstring(incoming_buff, read(len_5), len_5)
					local len_6 = buffer.readu16(incoming_buff, read(2))
					val_2["Type"] = buffer.readstring(incoming_buff, read(len_6), len_6)
					if bit32.btest(bool_1, 0b0000000000000001) then
						local len_7 = buffer.readu16(incoming_buff, read(2))
						val_2["EnumItems"] = table.create(len_7)
						for i_3 = 1, len_7 do
							local val_3
							local len_8 = buffer.readu16(incoming_buff, read(2))
							val_3 = buffer.readstring(incoming_buff, read(len_8), len_8)
							val_2["EnumItems"][i_3] = val_3
						end
					else
						val_2["EnumItems"] = nil
					end
					if bit32.btest(bool_1, 0b0000000000000010) then
						val_2["ShouldBeInteger"] = bit32.btest(bool_1, 0b0000000000000100)
					else
						val_2["ShouldBeInteger"] = nil
					end
					if bit32.btest(bool_1, 0b0000000000001000) then
						val_2["RangeMin"] = buffer.readi16(incoming_buff, read(2))
					else
						val_2["RangeMin"] = nil
					end
					if bit32.btest(bool_1, 0b0000000000010000) then
						val_2["RangeMax"] = buffer.readi16(incoming_buff, read(2))
					else
						val_2["RangeMax"] = nil
					end
					val_1["Args"][i_2] = val_2
				end
				value["Commands"][i_1] = val_1
			end
			if reliable_events[0][1] then
				for _, cb in reliable_events[0] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[0], value)
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for RequestCommands_Response. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	RequestToExecuteCommand = {
		Fire = function(Value: ({
			["Command"]: ((string)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_2 = 0
			local bool_2_pos_1 = alloc(1)
			if Value["Command"] ~= nil then
				bool_2 = bit32.bor(bool_2, 0b0000000000000001)
				local len_9 = #Value["Command"]
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_9)
				alloc(len_9)
				buffer.writestring(outgoing_buff, outgoing_apos, Value["Command"], len_9)
			end
			buffer.writeu8(outgoing_buff, bool_2_pos_1, bool_2)
		end,
	},
	RequestCommands_Response = {
		On = function(Callback: (Value: ({
			["Commands"]: ({ ({
				["Name"]: (string),
				["Alias"]: (string),
				["RankReq"]: (number),
				["Args"]: ({ ({
					["Name"]: (string),
					["Type"]: (string),
					["EnumItems"]: (({ (string) })?),
					["ShouldBeInteger"]: ((boolean)?),
					["RangeMin"]: ((number)?),
					["RangeMax"]: ((number)?),
				}) }),
			}) }),
		})) -> ())
			table.insert(reliable_events[0], Callback)
			for _, value in reliable_event_queue[0] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[0] = {}
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	RequestCommands_Request = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
		end,
	},
}
type Events = typeof(returns)
return returns
